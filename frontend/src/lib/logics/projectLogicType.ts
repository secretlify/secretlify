// Generated by kea-typegen on Mon, 29 Sep 2025 21:29:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DecryptedProject, Patch, ProjectLogicProps, SecretsUpdatedEvent } from './projectLogic'
import type { User } from '../api/user.api'
import type { DecryptedVersion, Project, ProjectMember, ProjectMemberRole } from '../api/projects.api'
import type { Integration } from '../api/integrations.api'
import type { EventSource, EventSource_2 } from 'eventsource/dist/index'

export interface projectLogicType extends Logic {
    actionCreators: {
        updateProjectContent: () => ({
            type: "update project content (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        });
        toggleHistoryView: () => ({
            type: "toggle history view (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        });
        setIsShowingHistory: (isShowingHistory: boolean) => ({
            type: "set is showing history (src.lib.logics.projectLogic)";
            payload: {
                isShowingHistory: boolean;
            };
        });
        selectHistoryChange: (changeId: string | null, patch: string | null) => ({
            type: "select history change (src.lib.logics.projectLogic)";
            payload: {
                changeId: string | null;
                patch: string | null;
            };
        });
        setPatches: (patches: Patch[]) => ({
            type: "set patches (src.lib.logics.projectLogic)";
            payload: {
                patches: Patch[];
            };
        });
        computePatches: (versions: DecryptedVersion[]) => ({
            type: "compute patches (src.lib.logics.projectLogic)";
            payload: {
                versions: DecryptedVersion[];
            };
        });
        setInputValue: (content: string) => ({
            type: "set input value (src.lib.logics.projectLogic)";
            payload: {
                content: string;
            };
        });
        setIsSubmitting: (isSubmitting: boolean) => ({
            type: "set is submitting (src.lib.logics.projectLogic)";
            payload: {
                isSubmitting: boolean;
            };
        });
        setIntegrations: (integrations: Integration[]) => ({
            type: "set integrations (src.lib.logics.projectLogic)";
            payload: {
                integrations: Integration[];
            };
        });
        handleSecretsUpdate: (secretsUpdatedEvent: SecretsUpdatedEvent) => ({
            type: "handle secrets update (src.lib.logics.projectLogic)";
            payload: {
                secretsUpdatedEvent: SecretsUpdatedEvent;
            };
        });
        setProjectData: (projectData: DecryptedProject | null) => ({
            type: "set project data (src.lib.logics.projectLogic)";
            payload: {
                projectData: DecryptedProject | null;
            };
        });
        syncProject: () => ({
            type: "sync project (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        });
        unsyncProject: () => ({
            type: "unsync project (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        });
        openProjectStream: (projectId: string) => ({
            type: "open project stream (src.lib.logics.projectLogic)";
            payload: {
                projectId: string;
            };
        });
        setSyncConnection: (connection: EventSource | null) => ({
            type: "set sync connection (src.lib.logics.projectLogic)";
            payload: {
                connection: EventSource_2 | null;
            };
        });
        setIsExternallyUpdated: (isExternallyUpdated: boolean) => ({
            type: "set is externally updated (src.lib.logics.projectLogic)";
            payload: {
                isExternallyUpdated: boolean;
            };
        });
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.projectLogic)";
            payload: any;
        });
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            integrations: {
                githubInstallationId: number;
            };
            members: ProjectMember[];
            name: string;
            passphraseAsKey: string;
            updatedAt: string;
        }, payload?: any) => ({
            type: "load project data success (src.lib.logics.projectLogic)";
            payload: {
                projectData: {
                    content: string;
                    id: string;
                    integrations: {
                        githubInstallationId: number;
                    };
                    members: ProjectMember[];
                    name: string;
                    passphraseAsKey: string;
                    updatedAt: string;
                };
                payload?: any;
            };
        });
        loadProjectDataFailure: (error: string, errorObject?: any) => ({
            type: "load project data failure (src.lib.logics.projectLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        loadProjectVersions: () => ({
            type: "load project versions (src.lib.logics.projectLogic)";
            payload: any;
        });
        loadProjectVersionsSuccess: (projectVersions: DecryptedVersion[], payload?: any) => ({
            type: "load project versions success (src.lib.logics.projectLogic)";
            payload: {
                projectVersions: DecryptedVersion[];
                payload?: any;
            };
        });
        loadProjectVersionsFailure: (error: string, errorObject?: any) => ({
            type: "load project versions failure (src.lib.logics.projectLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "update project content (src.lib.logics.projectLogic)": "updateProjectContent";
        "toggle history view (src.lib.logics.projectLogic)": "toggleHistoryView";
        "set is showing history (src.lib.logics.projectLogic)": "setIsShowingHistory";
        "select history change (src.lib.logics.projectLogic)": "selectHistoryChange";
        "set patches (src.lib.logics.projectLogic)": "setPatches";
        "compute patches (src.lib.logics.projectLogic)": "computePatches";
        "set input value (src.lib.logics.projectLogic)": "setInputValue";
        "set is submitting (src.lib.logics.projectLogic)": "setIsSubmitting";
        "set integrations (src.lib.logics.projectLogic)": "setIntegrations";
        "handle secrets update (src.lib.logics.projectLogic)": "handleSecretsUpdate";
        "set project data (src.lib.logics.projectLogic)": "setProjectData";
        "sync project (src.lib.logics.projectLogic)": "syncProject";
        "unsync project (src.lib.logics.projectLogic)": "unsyncProject";
        "open project stream (src.lib.logics.projectLogic)": "openProjectStream";
        "set sync connection (src.lib.logics.projectLogic)": "setSyncConnection";
        "set is externally updated (src.lib.logics.projectLogic)": "setIsExternallyUpdated";
        "load project data (src.lib.logics.projectLogic)": "loadProjectData";
        "load project data success (src.lib.logics.projectLogic)": "loadProjectDataSuccess";
        "load project data failure (src.lib.logics.projectLogic)": "loadProjectDataFailure";
        "load project versions (src.lib.logics.projectLogic)": "loadProjectVersions";
        "load project versions success (src.lib.logics.projectLogic)": "loadProjectVersionsSuccess";
        "load project versions failure (src.lib.logics.projectLogic)": "loadProjectVersionsFailure";
    };
    actionTypes: {
        updateProjectContent: "update project content (src.lib.logics.projectLogic)";
        toggleHistoryView: "toggle history view (src.lib.logics.projectLogic)";
        setIsShowingHistory: "set is showing history (src.lib.logics.projectLogic)";
        selectHistoryChange: "select history change (src.lib.logics.projectLogic)";
        setPatches: "set patches (src.lib.logics.projectLogic)";
        computePatches: "compute patches (src.lib.logics.projectLogic)";
        setInputValue: "set input value (src.lib.logics.projectLogic)";
        setIsSubmitting: "set is submitting (src.lib.logics.projectLogic)";
        setIntegrations: "set integrations (src.lib.logics.projectLogic)";
        handleSecretsUpdate: "handle secrets update (src.lib.logics.projectLogic)";
        setProjectData: "set project data (src.lib.logics.projectLogic)";
        syncProject: "sync project (src.lib.logics.projectLogic)";
        unsyncProject: "unsync project (src.lib.logics.projectLogic)";
        openProjectStream: "open project stream (src.lib.logics.projectLogic)";
        setSyncConnection: "set sync connection (src.lib.logics.projectLogic)";
        setIsExternallyUpdated: "set is externally updated (src.lib.logics.projectLogic)";
        loadProjectData: "load project data (src.lib.logics.projectLogic)";
        loadProjectDataSuccess: "load project data success (src.lib.logics.projectLogic)";
        loadProjectDataFailure: "load project data failure (src.lib.logics.projectLogic)";
        loadProjectVersions: "load project versions (src.lib.logics.projectLogic)";
        loadProjectVersionsSuccess: "load project versions success (src.lib.logics.projectLogic)";
        loadProjectVersionsFailure: "load project versions failure (src.lib.logics.projectLogic)";
    };
    actions: {
        updateProjectContent: () => void;
        toggleHistoryView: () => void;
        setIsShowingHistory: (isShowingHistory: boolean) => void;
        selectHistoryChange: (changeId: string | null, patch: string | null) => void;
        setPatches: (patches: Patch[]) => void;
        computePatches: (versions: DecryptedVersion[]) => void;
        setInputValue: (content: string) => void;
        setIsSubmitting: (isSubmitting: boolean) => void;
        setIntegrations: (integrations: Integration[]) => void;
        handleSecretsUpdate: (secretsUpdatedEvent: SecretsUpdatedEvent) => void;
        setProjectData: (projectData: DecryptedProject | null) => void;
        syncProject: () => void;
        unsyncProject: () => void;
        openProjectStream: (projectId: string) => void;
        setSyncConnection: (connection: EventSource | null) => void;
        setIsExternallyUpdated: (isExternallyUpdated: boolean) => void;
        loadProjectData: () => void;
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            integrations: {
                githubInstallationId: number;
            };
            members: ProjectMember[];
            name: string;
            passphraseAsKey: string;
            updatedAt: string;
        }, payload?: any) => void;
        loadProjectDataFailure: (error: string, errorObject?: any) => void;
        loadProjectVersions: () => void;
        loadProjectVersionsSuccess: (projectVersions: DecryptedVersion[], payload?: any) => void;
        loadProjectVersionsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        updateProjectContent: () => Promise<any>;
        toggleHistoryView: () => Promise<any>;
        setIsShowingHistory: (isShowingHistory: boolean) => Promise<any>;
        selectHistoryChange: (changeId: string | null, patch: string | null) => Promise<any>;
        setPatches: (patches: Patch[]) => Promise<any>;
        computePatches: (versions: DecryptedVersion[]) => Promise<any>;
        setInputValue: (content: string) => Promise<any>;
        setIsSubmitting: (isSubmitting: boolean) => Promise<any>;
        setIntegrations: (integrations: Integration[]) => Promise<any>;
        handleSecretsUpdate: (secretsUpdatedEvent: SecretsUpdatedEvent) => Promise<any>;
        setProjectData: (projectData: DecryptedProject | null) => Promise<any>;
        syncProject: () => Promise<any>;
        unsyncProject: () => Promise<any>;
        openProjectStream: (projectId: string) => Promise<any>;
        setSyncConnection: (connection: EventSource | null) => Promise<any>;
        setIsExternallyUpdated: (isExternallyUpdated: boolean) => Promise<any>;
        loadProjectData: () => Promise<any>;
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            integrations: {
                githubInstallationId: number;
            };
            members: ProjectMember[];
            name: string;
            passphraseAsKey: string;
            updatedAt: string;
        }, payload?: any) => Promise<any>;
        loadProjectDataFailure: (error: string, errorObject?: any) => Promise<any>;
        loadProjectVersions: () => Promise<any>;
        loadProjectVersionsSuccess: (projectVersions: DecryptedVersion[], payload?: any) => Promise<any>;
        loadProjectVersionsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        isExternallyUpdated: boolean;
        syncConnection: EventSource | null;
        shouldReconnect: boolean;
        selectedHistoryChangeId: string | null;
        patches: Patch[];
        inputValue: string;
        isSubmitting: boolean;
        projectData: DecryptedProject | null;
        isShowingHistory: boolean;
        integrations: Integration[];
        projectDataLoading: boolean;
        projectVersions: DecryptedVersion[];
        projectVersionsLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "loadProjectDataSuccess": ((action: {
            type: "load project data success (src.lib.logics.projectLogic)";
            payload: {
                projectData: {
                    content: string;
                    id: string;
                    integrations: {
                        githubInstallationId: number;
                    };
                    members: ProjectMember[];
                    name: string;
                    passphraseAsKey: string;
                    updatedAt: string;
                };
                payload?: any;
            };
        }, previousState: any) => void | Promise<void>)[];
        "syncProject": ((action: {
            type: "sync project (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "unsyncProject": ((action: {
            type: "unsync project (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "openProjectStream": ((action: {
            type: "open project stream (src.lib.logics.projectLogic)";
            payload: {
                projectId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
        "handleSecretsUpdate": ((action: {
            type: "handle secrets update (src.lib.logics.projectLogic)";
            payload: {
                secretsUpdatedEvent: SecretsUpdatedEvent;
            };
        }, previousState: any) => void | Promise<void>)[];
        "updateProjectContent": ((action: {
            type: "update project content (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "computePatches": ((action: {
            type: "compute patches (src.lib.logics.projectLogic)";
            payload: {
                versions: DecryptedVersion[];
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "projectLogic"
    ];
    pathString: "src.lib.logics.projectLogic";
    props: ProjectLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        isExternallyUpdated: boolean;
        syncConnection: EventSource | null;
        shouldReconnect: boolean;
        selectedHistoryChangeId: string | null;
        patches: Patch[];
        inputValue: string;
        isSubmitting: boolean;
        projectData: DecryptedProject | null;
        isShowingHistory: boolean;
        integrations: Integration[];
        projectDataLoading: boolean;
        projectVersions: DecryptedVersion[];
        projectVersionsLoading: boolean;
    };
    reducers: {
        isExternallyUpdated: (state: boolean, action: any, fullState: any) => boolean;
        syncConnection: (state: EventSource | null, action: any, fullState: any) => EventSource | null;
        shouldReconnect: (state: boolean, action: any, fullState: any) => boolean;
        selectedHistoryChangeId: (state: string | null, action: any, fullState: any) => string | null;
        patches: (state: Patch[], action: any, fullState: any) => Patch[];
        inputValue: (state: string, action: any, fullState: any) => string;
        isSubmitting: (state: boolean, action: any, fullState: any) => boolean;
        projectData: (state: DecryptedProject | null, action: any, fullState: any) => DecryptedProject | null;
        isShowingHistory: (state: boolean, action: any, fullState: any) => boolean;
        integrations: (state: Integration[], action: any, fullState: any) => Integration[];
        projectDataLoading: (state: boolean, action: any, fullState: any) => boolean;
        projectVersions: (state: DecryptedVersion[], action: any, fullState: any) => DecryptedVersion[];
        projectVersionsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        isExternallyUpdated: boolean;
        syncConnection: EventSource | null;
        shouldReconnect: boolean;
        selectedHistoryChangeId: string | null;
        patches: Patch[];
        inputValue: string;
        isSubmitting: boolean;
        projectData: DecryptedProject | null;
        isShowingHistory: boolean;
        integrations: Integration[];
        projectDataLoading: boolean;
        projectVersions: DecryptedVersion[];
        projectVersionsLoading: boolean;
    };
    selectors: {
        isExternallyUpdated: (state: any, props?: any) => boolean;
        syncConnection: (state: any, props?: any) => EventSource | null;
        shouldReconnect: (state: any, props?: any) => boolean;
        selectedHistoryChangeId: (state: any, props?: any) => string | null;
        patches: (state: any, props?: any) => Patch[];
        inputValue: (state: any, props?: any) => string;
        isSubmitting: (state: any, props?: any) => boolean;
        projectData: (state: any, props?: any) => DecryptedProject | null;
        isShowingHistory: (state: any, props?: any) => boolean;
        integrations: (state: any, props?: any) => Integration[];
        projectDataLoading: (state: any, props?: any) => boolean;
        projectVersions: (state: any, props?: any) => DecryptedVersion[];
        projectVersionsLoading: (state: any, props?: any) => boolean;
        privateKeyDecrypted: (state: any, props?: any) => string | null;
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
        projects: (state: any, props?: any) => Project[];
        isEditorDirty: (state: any, props?: any) => boolean;
        lastEditAuthor: (state: any, props?: any) => ProjectMember;
        currentUserRole: (state: any, props?: any) => ProjectMemberRole | undefined;
    };
    sharedListeners: {};
    values: {
        isExternallyUpdated: boolean;
        syncConnection: EventSource | null;
        shouldReconnect: boolean;
        selectedHistoryChangeId: string | null;
        patches: Patch[];
        inputValue: string;
        isSubmitting: boolean;
        projectData: DecryptedProject | null;
        isShowingHistory: boolean;
        integrations: Integration[];
        projectDataLoading: boolean;
        projectVersions: DecryptedVersion[];
        projectVersionsLoading: boolean;
        privateKeyDecrypted: string | null;
        userData: User | null;
        jwtToken: string | null;
        projects: Project[];
        isEditorDirty: boolean;
        lastEditAuthor: ProjectMember;
        currentUserRole: ProjectMemberRole | undefined;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        isEditorDirty: (inputValue: string, projectData: DecryptedProject | null, projectDataLoading: boolean) => boolean;
        lastEditAuthor: (patches: Patch[]) => ProjectMember;
        currentUserRole: (projectData: DecryptedProject | null) => ProjectMemberRole | undefined;
    };
}